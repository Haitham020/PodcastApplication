@model EpisodeDetailViewModel



@{
    ViewData["Title"] = "Publishing Episode";
}



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">



<section class="latest-podcast-section section-padding pb-0" id="section_2">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10 col-12">
                <div class="section-title-wrap mb-5">
                    <h4 class="section-title">@Model.Episode!.EpisodeTitle</h4>
                </div>
                <div class="row">
                    <div class="col-lg-3 col-12">
                        <div class="custom-block-icon-wrap">
                            <div class="custom-block-image-wrap custom-block-image-detail-page">
                                <img src="~/images/podcast/11683425_4790593.jpg" class="custom-block-image img-fluid" alt="">
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-9 col-12">
                        <div class="custom-block-info">
                            <div class="custom-block-top d-flex mb-1">
                                <small class="me-4">
                                    <button id="playPauseBtn" class="btn btn-primary"><i class="bi-play"></i> Play now</button>
                                </small>
                                <small>
                                    <i class="bi-clock-fill custom-icon"></i> @Model.Episode.EpisodeDuration
                                </small>
                                <small class="ms-auto">
                                    Episode <span class="badge">
                                        @Model.EpisodeNumber
                                    </span>
                                </small>
                                <small class="ms-auto">Likes <span id="like-count" class="badge">@Model.Episode.EpisodeLikes!.Count()</span></small>
                            </div>
                            <h2 class="mb-2">@Model.Episode.EpisodeTitle</h2>
                            <a asp-action="StagingPodcast" asp-route-id="@Model.Episode.PodcastId" class="mb-2"><strong>@Model.Episode.Podcast!.PodcastTitle</strong></a>
                            <p>@Model.Episode.EpisodeDescription</p>

                            <div class="audio-player">
                                <audio id="audioPlayer" src="~/audio/@Model.Episode.AudioFile" preload="metadata" controls></audio>
                                <div class="audio-controls">
                                    <button class="btn" id="rewindBtn">⏪ 15s</button>

                                    <button class="btn" id="forwardBtn">⏩ 15s</button>
                                    <span id="currentTime">00:00</span> / <span id="totalTime">00:00</span>
                                </div>
                            </div>
                            <div>
                                <form asp-action="TogglePublishEpisode" asp-controller="Creators" method="post" id="publishForm">
                                    <input type="hidden" name="id" value="@Model.Episode.EpisodeId" />
                                    @if (Model.Episode.IsPublic)
                                    {
                                        <button type="button" id="toggleButton" class="btn btn-secondary" onclick="togglePublish()">UnPublish</button>
                                    }
                                    else
                                    {
                                        <button type="button" id="toggleButton" class="btn btn-success" onclick="togglePublish()">Publish</button>
                                    }


                                </form>
                            </div>
                            @if (Model.Episode.Transcript != null)
                            {
                                <textarea id="transcriptTextArea" style="width:100%; height:200px;">@Model.Episode.Transcript</textarea>
                                <button id="saveTranscriptButton" class="btn btn-success">Save Transcript</button>

                            }
                            else
                            {
                                <button id="transcribeButton" class="btn btn-primary">Transcribe Audio</button>
                                <div id="transcriptionResult">
                                    <textarea id="transcriptTextArea" style="display:none; width:100%; height:200px;"></textarea>
                                    <button id="saveTranscriptButton" style="display:none;" class="btn btn-success">Save Transcript</button>
                                </div>
                            }



                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function togglePublish() {
        var isPublic = $('#toggleButton').hasClass('btn-success');

        Swal.fire({
            title: isPublic ? 'Publish Episode?' : 'Unpublish Episode?',
            text: isPublic ? "Do you want to publish this Episode?" : "Do you want to unpublish this Episode?",
            icon: isPublic ? 'success' : 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: isPublic ? 'Yes, publish it!' : 'Yes, unpublish it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("TogglePublishEpisode", "Creators")',
                    data: $('#publishForm').serialize(),
                    type: 'POST',
                    success: function (response) {
                        if (response.success) {

                            if (isPublic) {
                                $('#toggleButton').text('UnPublish').removeClass('btn-success').addClass('btn-secondary');
                                Swal.fire('Published!', response.message, 'success');
                            } else {
                                $('#toggleButton').text('Publish').removeClass('btn-secondary').addClass('btn-success');
                                Swal.fire('Unpublished!', response.message, 'success');
                            }
                        } else {
                            Swal.fire('Error!', response.message, 'error');
                        }
                    },
                    error: function () {
                        Swal.fire('Error!', 'An error occurred while updating the publish status.', 'error');
                    }
                });
            }
        });
    }


    //Transcript

    document.addEventListener('DOMContentLoaded', function () {
        const transcribeButton = document.getElementById('transcribeButton');
        const transcriptTextArea = document.getElementById('transcriptTextArea');
        const saveTranscriptButton = document.getElementById('saveTranscriptButton');

        let episodeId = '@Model.Episode.EpisodeId';

        if (transcribeButton) {
            transcribeButton.addEventListener('click', function () {

                transcriptTextArea.value = "Transcribing... Please wait.";
                transcriptTextArea.style.display = 'block';

                $.ajax({
                    url: '/CreatorEpisodes/Transcribe', 
                    type: 'POST',
                    data: {
                        episodeId: episodeId
                    },
                    success: function (response) {
                        transcriptTextArea.value = response.text; 
                        transcriptTextArea.style.display = 'block'; 
                        saveTranscriptButton.style.display = 'block';
                    },
                    error: function (xhr, status, error) {
                        console.error("Error transcribing audio:", error);
                    }
                });
            });
        }
    });

    $('#saveTranscriptButton').on('click', function () {
        let editedTranscript = $('#transcriptTextArea').val();
        let episodeId = '@Model.Episode.EpisodeId';

        $.ajax({
            url: '/CreatorEpisodes/SaveTranscript',
            type: 'POST',
            data: { episodeId: episodeId, transcript: editedTranscript },
            success: function () {
                alert('Transcript saved successfully!');
            },
            error: function () {
                alert('Error saving the transcript.');
            }
        });
    });


    // audio player
    $(document).ready(function () {
        const audioPlayer = document.getElementById('audioPlayer');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const rewindBtn = document.getElementById('rewindBtn');
        const forwardBtn = document.getElementById('forwardBtn');
        const currentTimeDisplay = document.getElementById('currentTime');
        const totalTimeDisplay = document.getElementById('totalTime');

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
        }

        audioPlayer.addEventListener('loadedmetadata', function () {
            totalTimeDisplay.textContent = formatTime(audioPlayer.duration);
        });

        audioPlayer.addEventListener('timeupdate', function () {
            currentTimeDisplay.textContent = formatTime(audioPlayer.currentTime);
        });

        playPauseBtn.addEventListener('click', function () {
            if (audioPlayer.paused) {
                audioPlayer.play();
                playPauseBtn.textContent = '⏸ Pause';
            } else {
                audioPlayer.pause();
                playPauseBtn.textContent = '▶️ Play';
            }
        });

        // Rewind 15 seconds
        rewindBtn.addEventListener('click', function () {
            audioPlayer.currentTime = Math.max(0, audioPlayer.currentTime - 15);
        });

        // Fast forward 15 seconds
        forwardBtn.addEventListener('click', function () {
            audioPlayer.currentTime = Math.min(audioPlayer.duration, audioPlayer.currentTime + 15);
        });
    });



</script>