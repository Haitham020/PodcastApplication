@model EpisodeDetailViewModel



@{
    ViewData["Title"] = "Publishing Episode";
}



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<section class="latest-podcast-section section-padding pb-0" id="section_2">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10 col-12">
                <div class="section-title-wrap mb-5 text-center">
                    <h4 class="section-title text-primary">@Model.Episode!.EpisodeTitle</h4>
                </div>
                <div class="row g-4">
                    <!-- Episode Cover -->
                    <div class="col-lg-3 col-md-4 col-12">
                        <div class="custom-block-icon-wrap text-center">
                            <div class="custom-block-image-wrap custom-block-image-detail-page shadow-sm rounded">
                                <img src="~/images/episodes/@Model.Episode.EpisodeCoverImg"
                                     class="custom-block-image img-fluid rounded"
                                     alt="Episode Cover">
                            </div>
                        </div>
                    </div>

                    <!-- Episode Details -->
                    <div class="col-lg-9 col-md-8 col-12">
                        <div class="custom-block-info p-4 bg-light shadow-sm rounded">
                            <div class="d-flex flex-wrap align-items-center mb-3">
                                <button id="playPauseBtn" class="btn btn-primary me-3">
                                    <i class="bi-play-fill me-1"></i>Play now
                                </button>
                                <small class="text-muted me-4">
                                    <i class="bi-clock-fill me-1"></i>
                                    @Model.Episode.EpisodeDuration
                                </small>
                                <small class="text-muted me-4">
                                    Episode <span class="badge bg-primary">@Model.EpisodeNumber</span>
                                </small>
                                <small class="ms-auto text-muted">
                                    Likes <span id="like-count" class="badge bg-success">
                                        @Model.Episode.EpisodeLikes!.Count()
                                    </span>
                                </small>
                            </div>

                            <h2 class="mb-2 text-dark">@Model.Episode.EpisodeTitle</h2>
                            <a asp-action="StagingPodcast" asp-route-id="@Model.Episode.PodcastId"
                               class="text-decoration-none text-primary mb-3 d-block">
                                <strong>@Model.Episode.Podcast!.PodcastTitle</strong>
                            </a>
                            <p class="text-secondary">@Model.Episode.EpisodeDescription</p>

                            <!-- Audio Player -->
                            <div class="audio-player mt-4 mb-4">
                                <audio id="audioPlayer" src="~/audio/@Model.Episode.AudioFile"
                                       preload="metadata" controls
                                       class="w-100 rounded shadow-sm"></audio>
                                <div class="audio-controls d-flex align-items-center justify-content-between mt-2">
                                    <button class="btn btn-outline-secondary" id="rewindBtn">⏪ 15s</button>
                                    <span id="currentTime" class="text-muted">00:00</span> /
                                    <span id="totalTime" class="text-muted">00:00</span>
                                    <button class="btn btn-outline-secondary" id="forwardBtn">⏩ 15s</button>
                                </div>
                            </div>

                            <!-- Publish Button -->
                            <div class="mt-4">
                                <form asp-action="TogglePublishEpisode" asp-controller="Creators" method="post" id="publishForm">
                                    <input type="hidden" name="id" value="@Model.Episode.EpisodeId" />
                                    @if (Model.Episode.IsPublic)
                                    {
                                        <button type="button" id="toggleButton"
                                                class="btn btn-secondary"
                                                onclick="togglePublish()">
                                            <i class="bi-eye-slash-fill"></i> Unpublish
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" id="toggleButton"
                                                class="btn btn-success"
                                                onclick="togglePublish()">
                                            <i class="bi-eye-fill"></i> Publish
                                        </button>
                                    }
                                </form>
                            </div>

                            <!-- Transcript Section -->
                            <div class="mt-4">
                                @if (Model.Episode.Transcript != null)
                                {
                                    <textarea id="transcriptTextArea"
                                              class="form-control shadow-sm mb-3"
                                              rows="6">@Model.Episode.Transcript</textarea>
                                    <button id="saveTranscriptButton"
                                            class="btn btn-success">
                                        <i class="bi-save-fill"></i> Save Transcript
                                    </button>
                                }
                                else
                                {
                                    <button id="transcribeButton"
                                            class="btn btn-primary">
                                        <i class="bi-mic-fill"></i> Transcribe Audio
                                    </button>
                                    <div id="transcriptionResult" class="mt-3">
                                        <textarea id="transcriptTextArea"
                                                  style="display:none;"
                                                  class="form-control shadow-sm mb-3"
                                                  rows="6"></textarea>
                                        <button id="saveTranscriptButton"
                                                style="display:none;"
                                                class="btn btn-success">
                                            <i class="bi-save-fill"></i> Save Transcript
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function togglePublish() {
        var isPublic = $('#toggleButton').hasClass('btn-success');

        Swal.fire({
            title: isPublic ? 'Publish Episode?' : 'Unpublish Episode?',
            text: isPublic ? "Do you want to publish this Episode?" : "Do you want to unpublish this Episode?",
            icon: isPublic ? 'success' : 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: isPublic ? 'Yes, publish it!' : 'Yes, unpublish it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("TogglePublishEpisode", "Creators")',
                    data: $('#publishForm').serialize(),
                    type: 'POST',
                    success: function (response) {
                        if (response.success) {

                            if (isPublic) {
                                $('#toggleButton').text('UnPublish').removeClass('btn-success').addClass('btn-secondary');
                                Swal.fire('Published!', response.message, 'success');
                            } else {
                                $('#toggleButton').text('Publish').removeClass('btn-secondary').addClass('btn-success');
                                Swal.fire('Unpublished!', response.message, 'success');
                            }
                        } else {
                            Swal.fire('Error!', response.message, 'error');
                        }
                    },
                    error: function () {
                        Swal.fire('Error!', 'An error occurred while updating the publish status.', 'error');
                    }
                });
            }
        });
    }


    //Transcript

    document.addEventListener('DOMContentLoaded', function () {
        const transcribeButton = document.getElementById('transcribeButton');
        const transcriptTextArea = document.getElementById('transcriptTextArea');
        const saveTranscriptButton = document.getElementById('saveTranscriptButton');

        let episodeId = '@Model.Episode.EpisodeId';

        if (transcribeButton) {
            transcribeButton.addEventListener('click', function () {

                transcriptTextArea.value = "Transcribing... Please wait.";
                transcriptTextArea.style.display = 'block';

                $.ajax({
                    url: '/CreatorEpisodes/Transcribe',
                    type: 'POST',
                    data: {
                        episodeId: episodeId
                    },
                    success: function (response) {
                        transcriptTextArea.value = response.text;
                        transcriptTextArea.style.display = 'block';
                        saveTranscriptButton.style.display = 'block';
                    },
                    error: function (xhr, status, error) {
                        console.error("Error transcribing audio:", error);
                    }
                });
            });
        }
    });

    $('#saveTranscriptButton').on('click', function () {
        let editedTranscript = $('#transcriptTextArea').val();
        let episodeId = '@Model.Episode.EpisodeId';

        $.ajax({
            url: '/CreatorEpisodes/SaveTranscript',
            type: 'POST',
            data: { episodeId: episodeId, transcript: editedTranscript },
            success: function () {
                alert('Transcript saved successfully!');
            },
            error: function () {
                alert('Error saving the transcript.');
            }
        });
    });


    // audio player
    $(document).ready(function () {
        const audioPlayer = document.getElementById('audioPlayer');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const rewindBtn = document.getElementById('rewindBtn');
        const forwardBtn = document.getElementById('forwardBtn');
        const currentTimeDisplay = document.getElementById('currentTime');
        const totalTimeDisplay = document.getElementById('totalTime');

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
        }

        audioPlayer.addEventListener('loadedmetadata', function () {
            totalTimeDisplay.textContent = formatTime(audioPlayer.duration);
        });

        audioPlayer.addEventListener('timeupdate', function () {
            currentTimeDisplay.textContent = formatTime(audioPlayer.currentTime);
        });

        playPauseBtn.addEventListener('click', function () {
            if (audioPlayer.paused) {
                audioPlayer.play();
                playPauseBtn.textContent = '⏸ Pause';
            } else {
                audioPlayer.pause();
                playPauseBtn.textContent = '▶️ Play';
            }
        });

        // Rewind 15 seconds
        rewindBtn.addEventListener('click', function () {
            audioPlayer.currentTime = Math.max(0, audioPlayer.currentTime - 15);
        });

        // Fast forward 15 seconds
        forwardBtn.addEventListener('click', function () {
            audioPlayer.currentTime = Math.min(audioPlayer.duration, audioPlayer.currentTime + 15);
        });
    });



</script>