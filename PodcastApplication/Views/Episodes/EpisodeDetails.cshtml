@model EpisodeDetailViewModel
@using PodcastApplication.Data;
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> _signInManager
@inject UserManager<ApplicationUser> _userManager
@inject AppDbContext _db

@{
    var userId = _userManager.GetUserId(User);
    var isLiked = _db.EpisodeLikes.FirstOrDefault(x => x.UserId == userId && x.EpisodeId == Model.Episode!.EpisodeId);

    var favoriteExist = _db.Favorites.FirstOrDefault(x => x.UserId == userId && x.EpisodeId == Model.Episode!.EpisodeId);

}


@{
    ViewData["Title"] = "Episode Details";
}


<style>

    #like-icon {
        transition: transform 0.3s ease;
    }

        #like-icon.liked {
            transform: scale(1.3);
        }

    .transcript-section {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .transcript-title {
        font-size: 1.5rem;
        margin-bottom: 10px;
    }

    .transcript-content {
        font-size: 1rem;
        line-height: 1.5;
    }

    .text-muted {
        color: #6c757d; /* Bootstrap muted color */
    }




</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">



<section class="latest-podcast-section section-padding pb-0" id="section_2">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10 col-12">
                <div class="section-title-wrap mb-5">
                    <h4 class="section-title">@Model.Episode!.EpisodeTitle</h4>
                </div>
                <div class="row">
                    <div class="col-lg-3 col-12">
                        <div class="custom-block-icon-wrap">
                            <div class="custom-block-image-wrap custom-block-image-detail-page">
                                <img src="~/images/podcast/11683425_4790593.jpg" class="custom-block-image img-fluid" alt="">
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-9 col-12">
                        <div class="custom-block-info">
                            <div class="custom-block-top d-flex mb-1">
                                <small class="me-4">
                                    <button id="playPauseBtn" class="btn btn-primary"><i class="bi-play"></i> Play now</button>
                                </small>
                                <small>
                                    <i class="bi-clock-fill custom-icon"></i> @Model.Episode.EpisodeDuration
                                </small>
                                <small class="ms-auto">
                                    Episode <span class="badge">
                                        @Model.EpisodeNumber
                                    </span>
                                </small>
                                <small class="ms-auto">Likes <span id="like-count" class="badge">@Model.Episode.EpisodeLikes!.Count()</span></small>
                            </div>
                            <h2 class="mb-2">@Model.Episode.EpisodeTitle</h2>
                            <h2 class="mb-2">@Model.Episode.Podcast!.PodcastTitle</h2>
                            <p>@Model.Episode.EpisodeDescription</p>

                            <!-- Audio Player Section -->
                            @if (_signInManager.IsSignedIn(User))
                            {
                                <div class="audio-player">
                                    <audio id="audioPlayer" src="~/audio/@Model.Episode.AudioFile" preload="metadata" controls></audio>
                                    <div class="audio-controls">
                                        <button class="btn" id="rewindBtn">⏪ 15s</button>
                                        <button class="btn" id="forwardBtn">⏩ 15s</button>
                                        <span id="currentTime">00:00</span> / <span id="totalTime">00:00</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <h4 class="text-warning">Please login to access the episode</h4>
                                </div>
                            }

                            <div>
                                @if (_signInManager.IsSignedIn(User))
                                {
                                    if (isLiked != null)
                                    {
                                        <button id="likeBtn" class="btn btn-secondary" onclick="toggleLike('@Model.Episode!.EpisodeId', false)">
                                            <i id="like-icon" class="fas fa-heart" style="color: red;"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button id="likeBtn" class="btn btn-secondary" onclick="toggleLike('@Model.Episode!.EpisodeId', true)">
                                            <i id="like-icon" class="far fa-heart" style="color: white;"></i>
                                        </button>
                                    }
                                }
                                @if (_signInManager.IsSignedIn(User))
                                {
                                    if (favoriteExist != null)
                                    {
                                        <button id="favBtn" href="#" class="badge ms-auto" onclick="toggleFavorite('@Model.Episode.EpisodeId', false)">
                                            <i class="bi-bookmark-fill fs-2"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button id="favBtn" href="#" class="badge ms-auto" onclick="toggleFavorite('@Model.Episode.EpisodeId', true)">
                                            <i class="bi-bookmark fs-2"></i>
                                        </button>
                                    }
                                }
                            </div>

                            <div class="profile-block profile-detail-block d-flex flex-wrap align-items-center mt-5">
                                <div class="d-flex mb-3 mb-lg-0 mb-md-0">
                                    <img src="~/images/profile/woman-posing-black-dress-medium-shot.jpg" class="profile-block-image img-fluid" alt="">
                                    <p>
                                        @Model.Episode.Podcast!.Creator!.UserName
                                        <img src="~/images/verified.png" class="verified-image img-fluid" alt="">
                                        <strong>@Model.Episode.Podcast.Creator.CreatorGenre</strong>
                                    </p>
                                </div>
                                <ul class="social-icon ms-lg-auto ms-md-auto">
                                    <li class="social-icon-item">
                                        <a href="#" class="social-icon-link bi-instagram"></a>
                                    </li>
                                    <li class="social-icon-item">
                                        <a href="#" class="social-icon-link bi-twitter"></a>
                                    </li>
                                    <li class="social-icon-item">
                                        <a href="#" class="social-icon-link bi-whatsapp"></a>
                                    </li>
                                </ul>
                            </div>

                            <!-- Transcript Section -->
                            <div class="transcript-section mt-5">
                                <h4 class="transcript-title">Transcript</h4>
                                @if (!string.IsNullOrEmpty(Model.Episode.Transcript))
                                {
                                    <div class="transcript-content">
                                        <p>@Model.Episode.Transcript</p>
                                    </div>
                                }
                                else
                                {
                                    <p class="text-muted">No transcript available for this episode.</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<button id="showComments" class="btn btn-primary mt-3">Show Comments</button>

<div id="commentSection" class="mt-3" style="display: none;">
    <div id="commentsContainer">
    </div>
    @if (_signInManager.IsSignedIn(User))
    {
        <textarea id="commentInput" class="form-control" placeholder="Write a comment..."></textarea>
        <button id="submitComment" class="btn btn-primary mt-2">Submit</button>
    }
    else
    {
        <a asp-action="Login" asp-controller="Account" id="submitComment" class="btn btn-primary mt-2">Login to comment</a>
    }
</div>




<section class="related-podcast-section section-padding">
    <div class="container">
        <div class="row">

            <div class="col-lg-12 col-12">
                <div class="section-title-wrap mb-5">
                    <h4 class="section-title">Related episodes</h4>
                </div>
            </div>
            @if (Model.RelatedEpisodes != null && Model.RelatedEpisodes.Any())
            {
                @foreach (var episode in Model.RelatedEpisodes)
                {
                    <div class="col-lg-4 col-12 mb-4 mb-lg-0">
                        <div class="custom-block custom-block-full">
                            <div class="custom-block-image-wrap">
                                <a asp-action="EpisodeDetails"
                                   asp-controller="Episodes" asp-route-id="@episode.EpisodeId">
                                    <img src="~/images/podcast/27376480_7326766.jpg" class="custom-block-image img-fluid" alt="">
                                </a>
                            </div>

                            <div class="custom-block-info">
                                <h5 class="mb-2">
                                    <a asp-action="EpisodeDetails"
                                       asp-controller="Episodes" asp-route-id="@episode.EpisodeId">
                                        @episode.EpisodeTitle
                                        @episode.Podcast!.PodcastTitle
                                        @episode.Podcast.Category!.CategoryName
                                    </a>
                                </h5>

                                <div class="profile-block d-flex">
                                    <img src="~/images/profile/woman-posing-black-dress-medium-shot.jpg" class="profile-block-image img-fluid" alt="">

                                    <p>
                                        @episode.Podcast!.Creator!.UserName
                                        <strong>@episode.Podcast.Creator.CreatorGenre</strong>
                                    </p>
                                </div>

                                <p class="mb-0">Lorem Ipsum dolor sit amet consectetur</p>

                                <div class="custom-block-bottom d-flex justify-content-between mt-3">
                                    <a href="#" class="bi-headphones me-1">
                                        <span>@episode.EpisodeListeners!.Count()</span>
                                    </a>

                                    <a href="#" class="bi-heart me-1">
                                        <span>@episode.EpisodeLikes!.Count()</span>
                                    </a>

                                    <a href="#" class="bi-chat me-1">
                                        <span>@episode.Comments!.Count()</span>
                                    </a>
                                </div>
                            </div>

                            <div class="social-share d-flex flex-column ms-auto">
                                <a href="#" class="badge ms-auto">
                                    <i class="bi-heart"></i>
                                </a>

                                <a href="#" class="badge ms-auto">
                                    <i class="bi-bookmark"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <h4>There is no related episodes at this time</h4>
            }



        </div>
    </div>
</section>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>

    //Listeners
let audioPlayer = document.getElementById('audioPlayer');
let episodeId = '@Model.Episode.EpisodeId';
let isFirstPlay = true; 

audioPlayer.addEventListener('play', () => {
    if (isFirstPlay) {
        $.ajax({
            url: '/Episodes/AddEpisodeListener',
            type: 'POST',
            data: { episodeId: episodeId },
            success: function() {
                console.log("Listener added for episode:", episodeId);
                isFirstPlay = false; 
            },
            error: function(xhr, status, error) {
                console.error("Error adding listener:", error);
            }
        });
    }
});


    //Progress
    let lastProgressSavedTime = 0;
    audioPlayer.addEventListener('timeupdate', () => {
        let progress = audioPlayer.currentTime;
        let episodeId = '@Model.Episode.EpisodeId';
        let currentTime = Date.now();

        if(currentTime - lastProgressSavedTime >= 20000) {
            lastProgressSavedTime = currentTime;

            $.ajax(
            {
                url: '/Episodes/SaveProgress',
                type: 'POST',
                data: { 
                    episodeId: episodeId, 
                    progress: progress 
                },
                success: function() {
                    console.log("Progress saved");
                }
            }
            
        )
        }
        
    })

    $(document).ready(function() {
    let episodeId = '@Model.Episode.EpisodeId';

    $.ajax({
        url: '/Episodes/GetProgress',
        type: 'GET',
        data: { episodeId: episodeId },
        success: function(progress) {
            if (progress) {
                console.log('Fetched progress:', progress);  
                if (progress && isFinite(progress)) {  
                        audioPlayer.currentTime = progress; 
                } else {
                  console.warn('Invalid progress value:', progress); 
                }
            }
        }
    });
}); 










    // audio player
    $(document).ready(function () {
        const audioPlayer = document.getElementById('audioPlayer');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const rewindBtn = document.getElementById('rewindBtn');
        const forwardBtn = document.getElementById('forwardBtn');
        const currentTimeDisplay = document.getElementById('currentTime');
        const totalTimeDisplay = document.getElementById('totalTime');

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
        }

        audioPlayer.addEventListener('loadedmetadata', function () {
            totalTimeDisplay.textContent = formatTime(audioPlayer.duration);
        });

        audioPlayer.addEventListener('timeupdate', function () {
            currentTimeDisplay.textContent = formatTime(audioPlayer.currentTime);
        });

        playPauseBtn.addEventListener('click', function () {
            if (audioPlayer.paused) {
                audioPlayer.play();
                playPauseBtn.textContent = '⏸ Pause';
            } else {
                audioPlayer.pause();
                playPauseBtn.textContent = '▶️ Play';
            }
        });

        // Rewind 15 seconds
        rewindBtn.addEventListener('click', function () {
            audioPlayer.currentTime = Math.max(0, audioPlayer.currentTime - 15);
        });

        // Fast forward 15 seconds
        forwardBtn.addEventListener('click', function () {
            audioPlayer.currentTime = Math.min(audioPlayer.duration, audioPlayer.currentTime + 15);
        });
    });




    //Toggle Likes:

    function toggleLike(episodeId, isLiking) {
        $.ajax({
            url: '/EpisodeLikes/ToggleLike',
            type: 'POST',
            data: {
                episodeId: episodeId,
                isLiking: isLiking
            },
            success: function (response) {
                if (response.likeCount !== undefined) {

                    $('#like-count').text(response.likeCount);

                    if (isLiking) {

                        $('#likeBtn').removeClass('btn-secondary').addClass('btn-danger')
                            .attr('onclick', "toggleLike('" + episodeId + "', false)");
                        $('#like-icon').removeClass('far fa-heart').addClass('fas fa-heart')
                            .css('color', 'blue');
                    } else {

                        $('#likeBtn').removeClass('btn-danger').addClass('btn-secondary')
                            .attr('onclick', "toggleLike('" + episodeId + "', true)");
                        $('#like-icon').removeClass('fas fa-heart').addClass('far fa-heart')
                            .css('color', 'white');
                    }
                }
                else {
                    alert("Error liking");
                }
            },
            error: function (xhr, status, error) {
                alert('Error processing your request. Please try again later.');
            }
        });
    }



    //Toggle Favorites:
    function toggleFavorite(episodeId, addingFavorite) {
        $.ajax({
            url: '/Favorites/ToggleFavorite',
            type: 'POST',
            data: {
                episodeId: episodeId,
                addingFavorite: addingFavorite
            },
            success: function (response) {
                if (addingFavorite) {
                    $('#favBtn').attr('onclick', `toggleFavorite('${episodeId}', false)`)
                        .find('i').removeClass('bi-bookmark').addClass('bi-bookmark-fill');
                }
                else {
                    $('#favBtn').attr('onclick', `toggleFavorite('${episodeId}', true)`)
                        .find('i').removeClass('bi-bookmark-fill').addClass('bi-bookmark');
                }
            },
            error: function (xhr, status, error) {
                alert('Error processing your request. Please try again later.');
            }
        });
    }




    //Comments

    $(document).ready(function () {
        var episodeId = '@Model.Episode!.EpisodeId';

        // Toggle comments section visibility
        $('#showComments').click(function () {
            $('#commentSection').toggle(); // Toggle comment section visibility

            // Load comments via AJAX when the section is shown
            if ($('#commentSection').is(':visible')) {
                $.ajax({
                    url: '/Comments/GetComments',
                    method: 'GET',
                    data: { episodeId: episodeId },
                    success: function (data) {
                        $('#commentsContainer').html(data); // Display comments
                    }
                });
            }
        });

        // Submit a new comment using AJAX
        $('#submitComment').click(function () {
            var commentText = $('#commentInput').val();
            if (commentText.trim() !== "") {
                $.ajax({
                    url: '/Comments/AddComment',
                    method: 'POST',
                    data: {
                        episodeId: episodeId,
                        commentText: commentText
                    },
                    success: function (response) {
                        $('#commentInput').val(''); // Clear input
                        $('#commentsContainer').append(response); // Add the new comment
                    }
                });
            }
        });

        $(document).on('click', '.edit-comment', function () {
            var commentId = $(this).data('comment-id');
            var commentTextElement = $('#comment-' + commentId).find('.comment-text');
            var originalText = commentTextElement.text();

            var deleteButton = $('#comment-' + commentId).find('.delete-comment');
            deleteButton.hide();

            commentTextElement.html('<input type="text" class="form-control" value="' + originalText + '">');
            var saveButton = $('<button class="btn btn-sm btn-success">Save</button>');
            $(this).replaceWith(saveButton);

            saveButton.click(function () {
                var updatedText = commentTextElement.find('input').val();
                $.ajax({
                    url: '/Comments/EditComment',
                    method: 'POST',
                    data: {
                        commentId: commentId,
                        updatedText: updatedText
                    },
                    success: function (response) {
                        commentTextElement.html(response);
                        saveButton.remove();
                        deleteButton.hide();

                    }

                });
            });
        });

        
        // Handle delete comment action
        $(document).on('click', '.delete-comment', function () {
            var commentId = $(this).data('comment-id');
            if (confirm("Are you sure you want to delete this comment?")) {
                $.ajax({
                    url: '/Comments/DeleteComment',
                    method: 'POST',
                    data: { commentId: commentId },
                    success: function () {
                        $('#comment-' + commentId).remove(); // Remove the comment from the DOM
                    }
                });
            }
        });
    });




</script>

